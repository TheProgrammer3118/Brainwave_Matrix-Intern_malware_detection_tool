import os
import psutil
import hashlib
import json
import joblib
import numpy as np
import logging

# Define malicious file extensions
MALICIOUS_EXTENSIONS = ['.exe', '.scr', '.bat', '.cmd', '.js', '.vbs']

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_known_hashes():
    """Load known hashes of malware from a JSON string."""
    return json.loads('[]')  # Replace with actual data

def calculate_file_hash(file_path):
    """Calculate the SHA256 hash of a file."""
    hash_sha256 = hashlib.sha256()
    try:
        with open(file_path, 'rb') as f:
            while chunk := f.read(8192):  # Read in chunks
                hash_sha256.update(chunk)
        return hash_sha256.hexdigest()
    except FileNotFoundError:
        logging.warning(f"File not found: {file_path}")
        return None

def extract_features(file_path):
    """Extract features from a file for the ML model."""
    try:
        file_size = os.path.getsize(file_path)
        _, ext = os.path.splitext(file_path)
        malicious_indicator = 1 if ext.lower() in MALICIOUS_EXTENSIONS else 0
        creation_time = os.path.getctime(file_path)
        modification_time = os.path.getmtime(file_path)
        
        return np.array([[file_size, len(ext), malicious_indicator, creation_time, modification_time]])
    except Exception as e:
        logging.error(f"Error extracting features from {file_path}: {e}")
        return None

def is_malicious(file_path, model, known_hashes):
    """Check if a file is malicious based on its features."""
    file_hash = calculate_file_hash(file_path)
    if file_hash in known_hashes:
        return True  # Already known malicious file

    features = extract_features(file_path)
    if features is not None:
        prediction = model.predict(features)
        return prediction[0] == 1  # Assuming 1 indicates malicious
    return False

def scan_files(directory, model, known_hashes):
    """Scan files in the given directory for malware."""
    logging.info(f"Scanning directory: {directory}")
    malware_detected = False
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            if is_malicious(file_path, model, known_hashes):
                logging.info(f"Potential malware detected: {file_path}")
                malware_detected = True
    return malware_detected

def scan_running_processes(model, known_hashes):
    """Scan running processes for malicious activity."""
    for process in psutil.process_iter(attrs=['pid', 'name', 'exe']):
        exe_path = process.info.get('exe')
        if exe_path and os.path.exists(exe_path):
            if is_malicious(exe_path, model, known_hashes):
                logging.info(f"Malicious process detected: {exe_path}")
            else:
                logging.info(f"Process {exe_path} is safe.")
        else:
            logging.warning("Executable path is missing or does not exist.")

def remove_malware(file_path):
    """Attempt to remove a potentially malicious file."""
    try:
        os.remove(file_path)
        logging.info(f"Removed malicious file: {file_path}")
    except Exception as e:
        logging.error(f"Error removing file {file_path}: {e}")

def welcome_message():
    """Display the welcome message and options."""
    print(" Welcome to the Advanced Malware Detector Tool! ")
    print("================================================")
    print("1. Basic Malware Detection")
    print("2. Advanced Malware Detection")
    print("3. Remove Malware (Basic or Advanced)")
    print("4. Exit")
    print("================================================")

if __name__ == "__main__":
    known_hashes = load_known_hashes()
    
    # Load the trained model
    model_path = 'malware_classifier.pkl'  # Adjust the path as needed
    if os.path.exists(model_path):
        model = joblib.load(model_path)
    else:
        logging.error("Model file not found. Please ensure 'malware_classifier.pkl' exists.")
        exit()

    while True:
        welcome_message()
        choice = input("Select an option (1-4): ").strip()

        if choice == '1':
            directory_to_scan = input("Enter the directory to scan for malware: ").strip()
            if os.path.isdir(directory_to_scan):
                malware_found = scan_files(directory_to_scan, model, known_hashes)
                if malware_found:
                    logging.warning("Alert: Malware detected in basic scan!")
                else:
                    logging.info("No malware detected in basic scan.")
            else:
                logging.error("Invalid directory. Please check the path and try again.")

        elif choice == '2':
            directory_to_scan = input("Enter the directory to scan for malware: ").strip()
            if os.path.isdir(directory_to_scan):
                malware_found = scan_files(directory_to_scan, model, known_hashes)
                scan_running_processes(model, known_hashes)
                if malware_found:
                    logging.warning("Alert: Malware detected in advanced scan!")
                else:
                    logging.info("No malware detected in advanced scan.")
            else:
                logging.error("Invalid directory. Please check the path and try again.")

        elif choice == '3':
            directory_to_scan = input("Enter the directory to scan for malware to remove: ").strip()
            if os.path.isdir(directory_to_scan):
                for root, _, files in os.walk(directory_to_scan):
                    for file in files:
                        file_path = os.path.join(root, file)
                        if is_malicious(file_path, model, known_hashes):
                            remove_malware(file_path)
            else:
                logging.error("Invalid directory. Please check the path and try again.")

        elif choice == '4':
            logging.info("Exiting the tool. Goodbye!")
            break

        else:
            logging.error("Invalid option. Please select a valid option (1-4).")
